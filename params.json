{"name":"blink","tagline":"Blink converts Node.js modules into CSS and provides a CSS Authoring Framework, with BEM support.","body":"<img src=\"https://github.com/blinkjs/blink/blob/master/artwork/blink_256_nobg.png?raw=true\" width=\"256\" height=\"256\" alt=\"blink\">\r\n\r\n> Blink converts [Node.js][] modules into CSS and provides a CSS Authoring Framework, with BEM support.\r\n\r\n[![Build Status][]](http://travis-ci.org/blinkjs/blink)\r\n[![Dependency Status][]](https://gemnasium.com/blinkjs/blink)\r\n[![NPM version][]](http://badge.fury.io/js/blink)\r\n[![Views][]](https://sourcegraph.com/github.com/blinkjs/blink)\r\n\r\n[![NPM](https://nodei.co/npm/blink.png?downloads=true)](https://nodei.co/npm/blink/)\r\n\r\n\r\n## Requirements\r\n\r\n- [Node][]\r\n\r\n\r\n## Features\r\n\r\n- [Runs on Node](#runs-on-node)\r\n- [OOCSS with BEM Syntax](#oocss-with-bem)\r\n- [Rules](#rules)\r\n- [Includes](#includes)\r\n- [Mixins](#mixins)\r\n- [Extenders](#extenders)\r\n- [Overrides](#overrides)\r\n- [Responders](#responders)\r\n- [TypeScript Source](#typescript-source)\r\n- [CLI](https://github.com/blinkjs/blink-cli)\r\n- [API](https://github.com/blinkjs/blink/blob/master/blink.d.ts)\r\n- [gulp.js plugin](https://github.com/blinkjs/gulp-blink)\r\n- [Grunt plugin](https://github.com/blinkjs/grunt-blink)\r\n- [Express middleware](https://github.com/blinkjs/blink-middleware)\r\n- [Spriting](#spriting)\r\n\r\n\r\n### Runs on Node\r\n\r\nBecause blink runs on [Node][], you have access to all JavaScript syntax, including\r\nvariables and functions, as well as [file I/O](http://nodejs.org/api/fs.html).\r\nThe possibilities are endless.\r\n\r\n\r\n### OOCSS with BEM\r\n\r\nBlink is designed with [BEM syntax][] in mind. You can create blocks, elements and\r\nmodifiers and their CSS selectors will be generated for you. You can configure\r\nyour BEM format however you want, but the default naming convention follows that\r\nwhich is defined in [MindBEMding &ndash; getting your head 'round BEM syntax][].\r\n\r\nHere's an example of a block with both an element and a modifier:\r\n\r\n```ts\r\n///<reference path=\"./node_modules/blink/blink.d.ts\"/>\r\nimport blink = require('blink');\r\n\r\nvar btn = new blink.Block('btn', {\r\n\r\n\tmin: {\r\n\t\twidth: 80\r\n\t},\r\n\r\n\telements: [\r\n\t\tnew blink.Element('foreground', {\r\n\t\t\tcolor: 'black'\r\n\t\t})\r\n\t],\r\n\r\n\tmodifiers: [\r\n\t\tnew blink.Modifier('wide', {\r\n\t\t\tmin: {\r\n\t\t\t\twidth: 120\r\n\t\t\t}\r\n\t\t})\r\n\t]\r\n});\r\n\r\nexport = btn;\r\n```\r\n\r\nThis would generate the following CSS:\r\n\r\n```css\r\n.btn {\r\n\tmin-width: 80px;\r\n}\r\n\r\n.btn__foreground {\r\n\tcolor: black;\r\n}\r\n\r\n.btn--wide {\r\n\tmin-width: 120px;\r\n}\r\n```\r\n\r\n\r\n### Rules\r\n\r\nAll BEM classes extend off of the standard Rule class. The Rule class allows you to\r\nspecify a standard CSS rule and can be useful when styling page defaults.\r\n\r\n\r\n```ts\r\n///<reference path=\"./node_modules/blink/blink.d.ts\"/>\r\nimport blink = require('blink');\r\n\r\nvar normalize = [\r\n\r\n\tnew blink.Rule('html', {\r\n\t\tfont: {\r\n\t\t\tfamily: 'sans-serif'\r\n\t\t}\r\n\t}),\r\n\r\n\tnew blink.Rule('body', {\r\n\t\tmargin: 0\r\n\t}),\r\n\r\n\tnew blink.Rule('a:active, a:hover', {\r\n\t\toutline: 0\r\n\t})\r\n\r\n\t// ...\r\n\r\n];\r\n\r\nexport = normalize;\r\n```\r\n\r\nYou are encouraged to use BEM blocks for all of your components. There's nothing\r\nstopping you from using basic rules, but you should avoid them if at all possible.\r\n\r\n\r\n### Includes\r\n\r\nBlink supports includes, but not in the way you might be used to. Includes are\r\njust functions that return an array of declarations. As such, you should lean\r\nagainst using them at all costs. Why? Say your include spits out 10 declarations.\r\nEvery time you include that function you'll add another 10 lines of CSS to your\r\nfile. Instead, use [extenders](#extenders) and [overrides](#overrides) when\r\npossible.\r\n\r\nYou might be wondering why blink supports includes at all if you aren't supposed\r\nto use them. This is because blink uses includes in the background to make\r\n[extenders](#extenders) work. As such, includes may be removed at a future date,\r\nif they can be worked out of the extender logic.\r\n\r\nStill, if you find yourself needing an include, refer to\r\n[the Rule spec](https://github.com/blinkjs/blink/blob/master/test/spec/lib/Rule.spec.ts#L80-L97)\r\nfor a working example.\r\n\r\n\r\n### Mixins\r\n\r\nIf you're coming from [Sass](http://sass-lang.com/), you might be familiar with\r\n[mixins](http://sass-lang.com/guide). Really, Sass mixins are no different than\r\nfunctions in JavaScript; thus, blink supports them. All you have to do is create\r\na function that returns an array of declarations. This is, in fact, how\r\n[extenders](#extenders) and [overrides](#overrides) work.\r\n\r\n\r\n### Extenders\r\n\r\nExtenders are named functions that return an array that is described in more detail\r\nbelow. An extender with no parameters always returns the same output. For example,\r\nhere's an extender named fill that fills its container:\r\n\r\n```ts\r\nexport function fill(): any[] {\r\n\treturn [arguments, () => {\r\n\t\treturn [\r\n\t\t\t['position', 'absolute'],\r\n\t\t\t['top', '0'],\r\n\t\t\t['right', '0'],\r\n\t\t\t['bottom', '0'],\r\n\t\t\t['left', '0']\r\n\t\t];\r\n\t}];\r\n}\r\n```\r\n\r\nLet's create two blocks named `.foo` and `bar` that both extend fill.\r\n\r\n```ts\r\nconsole.log(blink.compileRules([\r\n\tnew blink.Block('foo', {\r\n\t\textend: [ fill ]\r\n\t}),\r\n\tnew blink.Block('bar', {\r\n\t\textend: [ fill ]\r\n\t})\r\n]));\r\n```\r\n\r\nThese two blocks share the same extender, so there's no reason to generate the\r\nsame CSS twice. The above code would output the following:\r\n\r\n```css\r\n.foo, .bar {\r\n\tposition: absolute;\r\n\ttop: 0;\r\n\tright: 0;\r\n\tbottom: 0;\r\n\tleft: 0;\r\n}\r\n```\r\n\r\nThis is very powerful, especially when you want to spit-out multiple declarations.\r\nWhy, you ask? Because you only have to spit-out those declarations once! You can\r\nextend it from hundreds of blocks, but those lines never get written more than\r\nonce. This keeps your CSS as lean as possible.\r\n\r\nNow, let's talk about building your own extenders. The basic structure of an\r\nextender is thus:\r\n\r\n```ts\r\nexport function nothing(): any[] {\r\n\treturn [arguments, () => {\r\n\t\treturn [];\r\n\t}];\r\n}\r\n```\r\n\r\nThis extender, as its name suggests, does nothing. The name, however, must be\r\nprovided and must be unique.\r\n\r\nIn this case, the extender has no arguments; yet, they must also be returned for\r\nunique registration purposes.\r\n\r\nLet's see what a more complicated, inlineBlock extender would look like.\r\n\r\n```ts\r\nexport function inlineBlock(): any[] {\r\n\treturn [arguments, () => {\r\n\t\treturn ['display', 'inline-block'];\r\n\t}];\r\n}\r\n```\r\n\r\nThis is all fine and good, but it's pretty useless. We can add a verticalAlign\r\noption to make it more dynamic.\r\n\r\n```ts\r\nexport function inlineBlock(options?: { verticalAlign?: string }): any[] {\r\n\r\n\toptions = options || {};\r\n\r\n\treturn [arguments, () => {\r\n\t\tvar decs = [];\r\n\t\tdecs.push(['display', 'inline-block']);\r\n\r\n\t\tif (options.verticalAlign !== null) {\r\n\t\t\tdecs.push(['vertical-align', options.verticalAlign || 'middle']);\r\n\t\t}\r\n\r\n\t\treturn decs;\r\n\t}];\r\n}\r\n```\r\n\r\nGreat, but what about inline-block CSS hacks? Glad you asked! You can gain access\r\nto the configuration for a case like this.\r\n\r\n```ts\r\n///<reference path=\"./node_modules/blink/blink.d.ts\"/>\r\nimport blink = require('blink');\r\n\r\nfunction inlineBlock(options?: { verticalAlign?: string; }): any[] {\r\n\r\n\toptions = options || {};\r\n\r\n\treturn [arguments, (config: blink.Configuration) => {\r\n\t\tvar decs = [];\r\n\r\n\t\tif (config.firefox < 3) {\r\n\t\t\tdecs.push(['display', '-moz-inline-stack']);\r\n\t\t}\r\n\r\n\t\tdecs.push(['display', 'inline-block']);\r\n\r\n\t\tif (options.verticalAlign !== null) {\r\n\t\t\tdecs.push(['vertical-align', options.verticalAlign || 'middle']);\r\n\t\t}\r\n\r\n\t\tif (config.ie < 8) {\r\n\t\t\tdecs.push(['*vertical-align', 'auto']);\r\n\t\t\tdecs.push(['zoom', '1']);\r\n\t\t\tdecs.push(['*display', 'inline']);\r\n\t\t}\r\n\r\n\t\treturn decs;\r\n\t}];\r\n}\r\n```\r\n\r\nNow, that's a nice extender! Once you change your configuration to support newer\r\nbrowsers, the CSS hacks disappear. No need to change any of your source code. It's\r\nall about the configuration.\r\n\r\n\r\n#### Extender registration\r\n\r\nIt's important for you to know that, behind the scenes, blink is really smart\r\nabout extender registration. It doesn't just register your extender by function\r\nname, but also by the arguments you pass in. This means if you extend\r\n`inlineBlock({ verticalAlign: 'top' })` 50 times and\r\n`inlineBlock({ verticalAlign: 'bottom' })` 20 times, only two rules will be\r\ngenerated. Different input yields different output, so it has to generate two\r\nrules for this scenario.\r\n\r\n\r\n#### Extenders calling other extenders\r\n\r\nExtenders can call other extenders directly, but you must provide the extender\r\nwith the configuration.\r\n\r\n```ts\r\nimport blink = require('blink');\r\n\r\nfunction boxSizing(value: string): any[] {\r\n\treturn [arguments, (config: blink.Configuration) => {\r\n\t\treturn blink.extenders.experimental('box-sizing', value, {\r\n\t\t\tofficial: true,  // Opera/IE 8+\r\n\t\t\t\twebkit: true,  // Safari/Chrome, other WebKit\r\n\t\t\t\t\t moz: true   // Firefox, other Gecko\r\n\t\t})[1](config);\r\n\t}];\r\n}\r\n```\r\n\r\nNotice that index 1 accessed the extender function. When calling an extender\r\ndirectly the arguments become useless, so we throw them away.\r\n\r\n\r\n### Overrides\r\n\r\nOverrides are functions &ndash; no different than extenders &ndash; that allow you\r\nto override a single CSS declaration with any number of declarations. In fact, you\r\ncan and often will register extenders _as_ overrides. Overrides are registered on\r\nthe configuration object. For example, say we want the box-sizing extender above\r\nto be registered as an override:\r\n\r\n```ts\r\n///<reference path=\"./node_modules/blink/blink.d.ts\"/>\r\nimport blink = require('blink');\r\n\r\nvar overrides = blink.config.overrides;\r\n\r\noverrides['box-sizing'] = require('./lib/extenders/boxSizing');\r\n// Register more overrides here.\r\n```\r\n\r\n_Note: override keys are not dasherized for you._\r\n\r\nNow, every time someone declares `box-sizing: whatever` your override will be\r\ncalled with `whatever` as the first and only argument. The returned set of\r\ndeclarations will replace the original one.\r\n\r\n\r\n### Responders\r\n\r\nResponders currently only support\r\n[MediaAtRules](https://github.com/blinkjs/blink/blob/master/lib/MediaAtRule.ts),\r\nwhich allow you to create responsive websites. Here's an example of a basic\r\nresponder:\r\n\r\n```ts\r\n///<reference path=\"./node_modules/blink/blink.d.ts\"/>\r\nimport blink = require('blink');\r\n\r\n\r\nvar foo = new blink.Block('foo', {\r\n\trespond: [\r\n\t\tnew blink.MediaAtRule('screen and (max-width: 320)', {\r\n\t\t\twidth: 100\r\n\t\t})\r\n\t]\r\n});\r\n\r\nexport = foo;\r\n```\r\n\r\nThis generates the following CSS:\r\n\r\n```css\r\n@media screen and (max-width: 320) {\r\n\t.foo {\r\n\t\twidth: 100px;\r\n\t}\r\n}\r\n```\r\n\r\n[Unlike Sass](http://thesassway.com/intermediate/responsive-web-design-in-sass-using-media-queries-in-sass-32),\r\nat the time of this writing, blink supports extenders inside of media queries.\r\nBlink also merges similar media queries for you. So feel free to go to town with\r\nsome complicated responders!\r\n\r\n\r\n### Node API\r\n\r\nWith all the new build tools and taks runners springing up, blink was built with\r\nthat in mind, that various tools would need access to the compiled results without\r\nwriting any files to the disk.\r\n\r\n\r\n### TypeScript Source\r\n\r\nSince blink source code is written in [TypeScript][], you don't need to constantly\r\nlook-up documentation to gain insight as to how you can use the blink API.\r\nUnfortunately, although there is [TypeScript][] support for [other editors][], you\r\nwon't get the powerful feature of Intellisense unless you are using\r\n[Visual Studio][].\r\n\r\nBTW, you can write your blink files in [TypeScript][] or JavaScript. It really\r\ndoesn't matter as long as it ends up in JavaScript.\r\n\r\n\r\n## Getting Started\r\n\r\n\r\n### CLI Usage\r\n\r\n```bash\r\n$ npm install -g blink\r\n```\r\n\r\n\r\n### Library Usage\r\n\r\n```bash\r\n$ npm install --save-dev blink\r\n```\r\n\r\n```ts\r\n///<reference path=\"./node_modules/blink/blink.d.ts\"/>\r\nimport blink = require('blink');\r\n```\r\n\r\nRefer to the [blink module](https://github.com/blinkjs/blink/blob/master/blink.d.ts)\r\nfor a list of available public methods. Of particular interest are the compile\r\nmethods:\r\n\r\n- compile([options][], sources, callback)\r\n\t- sources can be any of string, [file][] array, [stream][] or [Rule][].\r\n- compileStream([options][], [stream][], callback)\r\n- compileContents([options][], [file][], callback)\r\n\r\nAll callbacks have the following function signature:\r\n- callback([err][], [config][], [file][])\r\n\r\n\r\n### Spriting\r\n\r\nAs blink is built on Node.js, any spriting tools available for Node.js can be\r\nimplemented quite easily. Some of these tools, like [Spritesmith][] allow you to\r\nnot only generate sprites, but to compute off the dimensions of the source images\r\nthat build the sprites. This makes your CSS highly maintainable. For example, when\r\ndesign gives you replacement images all you should have to do is drop them in the\r\nsprites folder without changing a single line of your blink source.\r\n\r\n\r\n## License\r\n\r\nReleased under the MIT license.\r\n\r\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/blinkjs/blink/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\r\n\r\n\r\n\r\n[Build Status]: https://secure.travis-ci.org/blinkjs/blink.png?branch=master\r\n[Dependency Status]: https://gemnasium.com/blinkjs/blink.png\r\n[NPM version]: https://badge.fury.io/js/blink.png\r\n[Views]: https://sourcegraph.com/api/repos/github.com/blinkjs/blink/counters/views-24h.png\r\n[Node.js]: http://nodejs.org/\r\n[Node]: http://nodejs.org/\r\n[BEM syntax]: http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/\r\n[MindBEMding &ndash; getting your head 'round BEM syntax]: http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/\r\n[TypeScript]: http://www.typescriptlang.org/\r\n[other editors]: http://msopentech.com/blog/2012/10/01/sublime-text-vi-emacs-typescript-enabled/\r\n[Visual Studio]: http://www.visualstudio.com/\r\n[options]: https://github.com/blinkjs/blink/blob/master/lib/interfaces/IConfigurationOptions.ts\r\n[stream]: http://nodejs.org/api/stream.html#stream_class_stream_readable\r\n[err]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\r\n[config]: https://github.com/blinkjs/blink/blob/master/lib/interfaces/IConfigurationOptions.ts\r\n[file]: https://github.com/blinkjs/blink/blob/master/lib/interfaces/IFile.ts\r\n[Rule]: https://github.com/blinkjs/blink/blob/master/lib/Rule.ts\r\n[Sass]: http://sass-lang.com/\r\n[Spritesmith]: https://github.com/Ensighten/spritesmith\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}